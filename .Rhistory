behav.df <- data.frame(TERM = behav, CATEGORY = rep('BEHAVIORAL_HEALTH', length(behav)))
rx.df <- data.frame(TERM = rx, CATEGORY = rep('RX', length(rx)))
seniors.df <- data.frame(TERM = seniors, CATEGORY = rep('MEDICARE', length(seniors)))
final.df <- rbind(waiverTerms.df, donations.df, telehealth.df, partnership.df, preAuth.df,
provSuport.df, behav.df, rx.df, seniors.df)
final.df$TERM <- as.character(final.df$TERM)
final.df$CATEGORY <- as.character(final.df$CATEGORY)
termMatch.df <- data.frame(PLAN_NAME = character(),
TEXT = character(),
TERM = character(),
CATEGORY = character())
# cycle through all terms and identify those that are within text
for (i in 1:nrow(final.df)){
termMatch <- paragraphText %>%
mutate(MATCH = str_detect(TEXT, final.df$TERM[i]),
TERM = final.df$TERM[i],
CATEGORY = final.df$CATEGORY[i]) %>%
filter(MATCH == TRUE) %>%
select(c('PLAN_NAME', 'TEXT', 'TERM', 'CATEGORY'))
termMatch.df <- rbind(termMatch.df,termMatch)
}
finalMatches.df <- termMatch.df %>%
select(PLAN_NAME, CATEGORY) %>%
distinct()
# all categorical info
fullMatches.df <- left_join(paragraphText, finalMatches.df, by=c('PLAN_NAME' = 'PLAN_NAME')) %>%
select(PLAN_NAME,
TEXT,
CATEGORY,
IND = 1)
fullMatches.df$CATEGORY <- ifelse(is.na(fullMatches.df$CATEGORY), 'OTHER',fullMatches.df$CATEGORY)
################################################################
############# Dollar Values
# dollar amounts for each plan
dollarAmts.ls <- str_extract_all(paragraphText$TEXT, '[$][0-9]+\\.?\\,?[0-9]*[:space:]*(million)?(billion)?')
dollarAmts.ls <- rapply(dollarAmts.ls,function(x) gsub("[^[:alnum:] ]", "", x),how='list')
dollarAmts.ls <- rapply(dollarAmts.ls,trimws,how='list')
# convert to numeric
convertedDollars.ls <- rapply(dollarAmts.ls,
function(x){
gsub(',', replacement = '',x = x) # replace commas
gsub(' ', replacement = '', x = x)
lapply(x, function(y){
if(str_detect(y,'million')){
y <- gsub("million", replacement = "", y)
y <- as.numeric(y) * 10^6
} else if(str_detect(x,'billion')){
y <- gsub("billion", replacement = "", x = y)
y <- as.numeric(y) * 10^9
} else {
y <- as.numeric(y)
}
}
)
},
how='list')
# find the max value per plan
finalNumbers.ls <- lapply(convertedDollars.ls, function(x){max(unlist(x))})
# prep data as dataframe
finalNumbers.df <- data.frame(matrix(unlist(finalNumbers.ls), nrow=length(finalNumbers.ls), byrow=T))
colnames(finalNumbers.df) <- c('IND')
finalNumbers.df$IND <- with(finalNumbers.df, ifelse(IND <= 0, NA, IND))
finalNumbers.df$PLAN_NAME <- paragraphText$PLAN_NAME
finalNumbers.df$CATEGORY <- 'MENTIONED_AMT'
mentionedAmt.df <- finalNumbers.df %>%
filter(!is.na(IND)) %>%
select(PLAN_NAME,
CATEGORY,
IND)
View(paragraphText)
convertedDollars.ls[[9]]
finalNumbers.ls[[9]]
View(dollarAmts.ls)
dollarAmts.ls[[9]]
gsub("billion", replacement = "", x = dollarAmts.ls[[9]][8])
as.numeric(gsub("billion", replacement = "", x = dollarAmts.ls[[9]][8]))
as.numeric(gsub("billion", replacement = "", x = dollarAmts.ls[[9]][8]))*10^9
convertedDollars.ls[[9]]
library(tidyverse)
library(pander)
library(knitr)
library(dplyr)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
# gather data -- long format
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
#head(testSet)
#take the mean of the  training dataset; every entry gets the same prediction
raw_avg <- mean(trainingSet$rating, na.rm =TRUE)
raw_avg
RMSE = function(data, data_avg){
sqrt(mean((data - data_avg)^2, na.rm =TRUE))
}
trainRMSE <-  RMSE(trainingSet$rating,raw_avg )
trainRMSE
testRMSE<-  RMSE(testSet$rating,raw_avg)
testRMSE
set.seed(200)
# gather data -- long format
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
View(trainingSet)
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
View(finalData.df)
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
head(testSet)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
# gather data -- long format
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
head(trainingSet)
View(trainingSet)
View(testSet)
raw_avg <- mean(trainingSet$rating, na.rm =TRUE)
raw_avg
RMSE = function(data, data_avg){
sqrt(mean((data - data_avg)^2, na.rm =TRUE))
}
trainRMSE <-  RMSE(trainingSet$rating,raw_avg )
trainRMSE
testRMSE<-  RMSE(testSet$rating,raw_avg)
testRMSE
train_matrix <- trainingSet %>%
spread(movieId, rating) %>%
column_to_rownames(var = "userId")
user_bias <- rowMeans(train_matrix, na.rm = TRUE) - raw_avg
item_bias <- colMeans(train_matrix, na.rm = TRUE) - raw_avg
user_bias
item_bias
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
baseline_predictor
View(user_bias)
View(item_bias)
View(baseline_predictor)
raw_avg
raw_avg+user_bias[1]+item_bias[1]
raw_avg+user_bias[1]+item_bias[2]
raw_avg+user_bias[1]+item_bias[2]
raw_avg+user_bias[1]+item_bias[3]
raw_avg+user_bias[2]+item_bias[3]
test_matrix <- testSet %>%
spread(movieId, rating) %>%
column_to_rownames(var = "userId")
# Applying baseline predictor function to each user-item combination of test_matrix (10x8)
baseline_predictor_test <- data.frame(t(sapply(rownames(test_matrix), function(i) sapply(names(test_matrix), function(j) blp(user_bias[i], item_bias[j])))))
names(baseline_predictor_test) <- names(test_matrix)
# Clipping any values greater than 5
baseline_predictor_test[baseline_predictor_test > 5] <- 5
# Quick check of whether baseline predictions were created consistently across train_matrix and test_matrix
baseline_predictor_test$`356` == baseline_predictor$`356`
View(text_matrix)
View(test_matrix)
View(baseline_predictor_test)
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[i], item_bias[j]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor
# Applying baseline predictor function to each user-item combination of train_matrix (10x10)
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[i], item_bias[j]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor
sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i])))
1:10
user_bias
str(user_bioas)
str(user_bias)
sapply(1:10, function(i) sapply(1:10, function(j) j, i))
sapply(1:10, function(i) sapply(1:10, function(j) paste(j, i)))
sapply(1:10, function(i) sapply(1:10, function(j) print(i)))
sapply(1:10, function(i) sapply(1:10, function(j) paste(j, i)))
# Applying baseline predictor function to each user-item combination of train_matrix (10x10)
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping any values greater than 5 (max rating = 5)
baseline_predictor[baseline_predictor > 5] <- 5
names(test_matrix)
rownames(test_matrix)
user_bias[2571]
user_bias['2571']
sapply(rownames(test_matrix), function(i) print(i))
sapply(rownames(test_matrix), function(i) )
sapply(rownames(test_matrix), function(i) i)
sapply(rownames(test_matrix), function(i) user_bias[i])
t(sapply(rownames(test_matrix), function(i) user_bias[i]))
sapply(rownames(test_matrix),
function(i) sapply(names(test_matrix),
function(j) blp(user_bias[i], item_bias[j])
)))
sapply(rownames(test_matrix),
function(i) sapply(names(test_matrix),
function(j) blp(user_bias[i], item_bias[j])
))
sapply(rownames(test_matrix), function(i) user_bias[i])
raw_avg + user_bias[1] +item_bias[2]
test_matrix <- testSet %>%
spread(movieId, rating) %>%
column_to_rownames(var = "userId")
# Applying baseline predictor function to each user-item combination of test_matrix (10x8)
baseline_predictor_test <- data.frame(
t(sapply(rownames(test_matrix),
function(i) sapply(names(test_matrix),
function(j) blp(user_bias[i], item_bias[j])
))))
names(baseline_predictor_test) <- names(test_matrix)
# Clipping any values greater than 5
baseline_predictor_test[baseline_predictor_test > 5] <- 5
# Quick check of whether baseline predictions were created consistently across train_matrix and test_matrix
baseline_predictor_test$`356` == baseline_predictor$`356`
# Creating a function to calculate RMSE on each matrix using the baseline predictions
predictor_RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Baseline predictor RMSE for train_matrix and test_matrix
(train_predictor_RMSE <- predictor_RMSE(train_matrix, baseline_predictor))
(test_predictor_RMSE <- predictor_RMSE(test_matrix, baseline_predictor_test))
RMSE(train_matrix, baseline_predictor)
View(trainMatrix)
View(train_matrix)
View(test_matrix)
View(baseline_predictor_test)
test_matrix-baseline_predictor_test
(test_matrix-baseline_predictor_test)^2
sum((test_matrix-baseline_predictor_test)^2)
sum((test_matrix-baseline_predictor_test)^2, na.rm=TRUE)
sum(!is.na(test_matrix))
sum((test_matrix-baseline_predictor_test)^2, na.rm=TRUE)/10
sqrt(sum((test_matrix-baseline_predictor_test)^2, na.rm=TRUE)/10)
user_bias
item_bias
raw_avg+user_bias[5]+item_bias[4]
raw_avg
train_matrix
View(finalData.df)
rawData %>% select(rating) %>% distinct()
rawData %>% select(rating) %>% distinct() %>% arrange()
rawData %>% select(rating) %>% distinct() %>% arrange(desc(rating))
predictor_RMSE
test_predictor_RMSE
test_matrix
test_matrix[5,2]
test_matrix[5,2]
baseline_predictor_test[5,2]
finalData.df
finalData.df['410']
finalData.df
finalData.df[,5]
finalData.df[5,]
test_matrix[5,2]
test_matrix
RMSE(test_matrix[5,2],baseline_predictor_test[5,2] )
baseline_predictor_test[5,2]
